<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\packages\System.Collections.Immutable.1.1.37\lib\portable-net45+win8+wp8+wpa81\System.Collections.Immutable.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.CodeAnalysis.Common.1.0.0\lib\portable-net45+win8\Microsoft.CodeAnalysis.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.CodeAnalysis.CSharp.1.0.0\lib\portable-net45+win8\Microsoft.CodeAnalysis.CSharp.dll" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Text.Encoding" #>
<#@ assembly name="System.Threading.Tasks" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp.Syntax" #>
using System.ComponentModel;

/*
	This sample demonstrates the use of Roslyn inside a compile-time T4 template.
	Note that you could generate the code using Roslyn, too. However, in this sample
	I wanted to show how to combine it with T4.
*/

namespace RoslynDemos
{
<# 
// Read class source
var solutionPath = Host.ResolveAssemblyReference("$(ProjectDir)");
var classSource = File.ReadAllText(Path.Combine(
	solutionPath, "TemperatureSensorSettings.cs"));

// Parse source using Roslyn
var tree = CSharpSyntaxTree.ParseText(classSource)
	.GetRoot() as CompilationUnitSyntax;

// Navigate to class inside namespace
var namespaceDeclaration = tree.Members[0] as NamespaceDeclarationSyntax;
var immutableClass = namespaceDeclaration.Members[0] as ClassDeclarationSyntax;
#>
	public class <#= immutableClass.Identifier.Text #>ViewModel 
		: INotifyPropertyChanged
	{ 
<# foreach(var property in immutableClass.Members
	.OfType<PropertyDeclarationSyntax>())
	{ #>
		private <#= ((PredefinedTypeSyntax)property.Type).Keyword.Text #> 
			<#= property.Identifier.Text #>Value;
		<#= ((PredefinedTypeSyntax)property.Type).Keyword.Text #> 
			<#= property.Identifier.Text #>
		{
			get { return this.<#= property.Identifier.Text #>Value; }
			set
			{
				if (this.<#= property.Identifier.Text #>Value != value)
				{
					this.<#= property.Identifier.Text #>Value = value;
					this.RaisePropertyChanged(
						"<#= property.Identifier.Text #>");
				}
			}
		}

<# } #>
		internal <#= immutableClass.Identifier.Text #> 
			<#= immutableClass.Identifier.Text #>
		{
			get 
			{ 
				return new <#= immutableClass.Identifier.Text #>(<#= string.Join(
					", ", 
					immutableClass.Members
						.OfType<PropertyDeclarationSyntax>()
						.Select(p => p.Identifier.Text)) #>);
			}
		}

		public void RaisePropertyChanged(string propertyName) { /* […] */ }
		public event PropertyChangedEventHandler PropertyChanged;
	}
}
